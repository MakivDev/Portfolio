
.extension-projects {
  animation: extension-projects 1s;
}

@keyframes extension-projects {
  0% {
    width: 0px;
  }
  100% {
    width: 511px;
  }
}

.extension-skils {
  animation: extension-skils 1s;
}

@keyframes extension-skils {
  0% {
    width: 0px;
  }
  100% {
    width: 240px;
  }
}

.extension-about {
  animation: extension-about 1s;
}

@keyframes extension-about {
  0% {
    width: 0px;
  }
  100% {
    width: 330px;
  }
}

.extension-contacts {
  animation: extension-contacts 1s;
}

@keyframes extension-contacts {
  0% {
    width: 0px;
  }
  100% {
    width: 127px;
  }
}

/* Вбудовані значення animation-timing-function:
 * 
 * linear
 * Швидкість анімації залишається постійною протягом усього циклу.
 * animation-timing-function: linear;
 * 
 * ease
 * Анімація починається повільно, потім прискорюється і знову сповільнюється до кінця.
 * animation-timing-function: ease;
 * 
 * ease-in
 * Анімація починається повільно, потім прискорюється до кінця.
 * animation-timing-function: ease-in;
 * 
 * ease-out
 * Анімація починається швидко, потім сповільнюється до кінця.
 * animation-timing-function: ease-out;
 * 
 * ease-in-out
 * Анімація починається повільно, прискорюється посередині, а потім знову сповільнюється до кінця.
 * animation-timing-function: ease-in-out;
 * 
 * step-start
 * Анімація стрибає до кінцевого значення на початку циклу (еквівалент steps(1, start)).
 * animation-timing-function: step-start;
 * 
 * step-end
 * Анімація стрибає до кінцевого значення наприкінці циклу (еквівалент steps(1, end)).
 * animation-timing-function: step-end;
 * 
 * steps(int, start|end)
 * Анімація розбивається на кілька рівних кроків, які виконуються на початку (start) або в кінці (end) кожного кроку.
 * animation-timing-function: steps(4, end);
 * 
 * cubic-bezier(x1, y1, x2, y2)
 * Власна крива Безьє для створення користувацького графіку швидкості анімації.
 * animation-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1.0);
 */
